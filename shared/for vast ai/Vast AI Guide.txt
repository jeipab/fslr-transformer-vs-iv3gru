Expose port "8501" in your Vast AI Template

Set-up code base:
	Clone the repository:
		1. git clone https://github.com/jeipab/fslr-transformer-vs-iv3gru.git
	Change directory:
		2. cd fslr-transformer-vs-iv3gru
	Set up virtual environment:
		3. python -m venv venv
	Activate virtual environment:
		4. source venv/bin/activate
	Install dependencies:
		5. pip install -r requirements.txt

Add missing files:
1. Data
2. Trained models
3. Replace validation

Run streamlit app.
1. streamlit run run_app.py --server.port 8081 --server.address 0.0.0.0

Create a new tunnel.
1. http://localhost:8081
3. https://capable-oasis-aaa-load.trycloudflare.com


OPTIONAL:
Test IV3-GRU:
python -c "
try:
    from evaluation.prediction.predict import ModelPredictor
    predictor = ModelPredictor('iv3_gru', 'trained_models/iv3_gru/iv3gru_100_epochs_09-16/InceptionV3GRU_best.pt', device='cpu')
    print('IV3-GRU loaded successfully on CPU')
except Exception as e:
    print('IV3-GRU loading failed:', str(e))
"

Fix for video generation:
apt-get update && apt-get install -y ffmpeg libx264-dev

Fix CSV:
cat > fix_csv_encoding.py << 'EOF'
import pandas as pd
import os

# Fix training CSV
try:
    df_train = pd.read_csv('data/processed/train_labels.csv', encoding='latin-1')
    df_train.to_csv('data/processed/train_labels_fixed.csv', index=False, encoding='utf-8')
    print("Fixed train_labels.csv")
except Exception as e:
    print(f"Error fixing train_labels.csv: {e}")

# Fix validation CSV
try:
    df_val = pd.read_csv('data/processed/val_labels.csv', encoding='latin-1')
    df_val.to_csv('data/processed/val_labels_fixed.csv', index=False, encoding='utf-8')
    print("Fixed val_labels.csv")
except Exception as e:
    print(f"Error fixing val_labels.csv: {e}")

print("CSV files fixed with UTF-8 encoding")
EOF

python fix_csv_encoding.py

Remove smart quote in NPZ:
cat > fix_smart_quotes.py << 'EOF'
import os
from pathlib import Path

def fix_smart_quotes(directory):
    """Fix smart quotes in filenames"""
    dir_path = Path(directory)
    if not dir_path.exists():
        print(f"Directory {directory} does not exist")
        return
    
    renamed_count = 0
    
    # Look for files with smart quotes
    for file_path in dir_path.glob("*.npz"):
        old_name = file_path.name
        
        # Fix smart quote apostrophe (\u2019) to nothing
        if '\u2019' in old_name:
            new_name = old_name.replace('\u2019', '')  # Remove smart quote
            new_path = file_path.parent / new_name
            file_path.rename(new_path)
            print(f"Renamed: {old_name} -> {new_name}")
            renamed_count += 1
    
    print(f"Renamed {renamed_count} files in {directory}")

# Fix both directories
print("Fixing smart quotes in keypoints_train...")
fix_smart_quotes("data/processed/keypoints_train")

print("\nFixing smart quotes in keypoints_val...")
fix_smart_quotes("data/processed/keypoints_val")

print("\nDone! Fixed smart quote apostrophes in filenames.")
EOF

python fix_smart_quotes.py

cat > fix_csv_to_match_npz.py << 'EOF'
import pandas as pd

# Read CSV
df = pd.read_csv('data/processed/train_labels_fixed.csv', encoding='utf-8')

# Fix the problematic character \x92 (Windows apostrophe)
df['file'] = df['file'].str.replace('\x92', '')

# Save the corrected CSV
df.to_csv('data/processed/train_labels_final.csv', index=False, encoding='utf-8')

print("Fixed CSV file - removed \\x92 characters")
print("Saved as train_labels_final.csv")

# Do the same for validation CSV
df_val = pd.read_csv('data/processed/val_labels_fixed.csv', encoding='utf-8')
df_val['file'] = df_val['file'].str.replace('\x92', '')
df_val.to_csv('data/processed/val_labels_final.csv', index=False, encoding='utf-8')

print("Fixed validation CSV - saved as val_labels_final.csv")
EOF

python fix_csv_to_match_npz.py
